{"ast":null,"code":"var _jsxFileName = \"/home/kristin/Documents/dev/5eInitiative/initiative-tracker/src/TimelineView.js\";\nimport React from \"react\";\nimport TimelineCard from \"./TimelineCard\";\nimport styles from \"./CSS/TimelineView.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TimelineView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInitiativeChange = (newInitiative, memberIndex) => {\n      this.props.onInitiativeChange(newInitiative, memberIndex);\n    };\n\n    this.renderCurrentRound = list => {\n      // First, check if the current round is empty. If it is, generate a new round from the working member list\n      if (this.state.currentRound.length <= 0) {\n        let newRound = [];\n        list.forEach(i => {\n          if (i.initiative != null) {\n            newRound.push(i);\n          }\n        }); // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n\n        newRound.sort((a, b) => a.initiative * 1 < b.initiative * 1 ? 1 : -1);\n        this.setState({\n          currentRound: newRound\n        });\n      } // Then, render everyone in the current round\n\n\n      let toRender = [];\n      toRender.push(this.state.currentRound.map(i => {\n        return /*#__PURE__*/_jsxDEV(TimelineCard, {\n          member: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }, this);\n      }));\n      return toRender;\n    };\n\n    this.renderInitiativeOrder = list => {\n      // Shift member list into initiative list, discarding anyone without an initiative\n      let tempInitiativeOrder = [];\n      let debugarray = [];\n      list.forEach(i => {\n        debugarray.push(i.initiative);\n\n        if (i.initiative != null) {\n          tempInitiativeOrder.push(i);\n        }\n      });\n      alert(debugarray); // Sort initiative order\n      // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n\n      tempInitiativeOrder.sort((a, b) => a.initiative * 1 < b.initiative * 1 ? 1 : -1);\n      let requireRefresh = false;\n\n      if (this.state.initiativeOrder.length !== tempInitiativeOrder.length) {\n        requireRefresh = true;\n      } else {\n        for (let i = 0; i < tempInitiativeOrder.length; i++) {\n          if (this.state.initiativeOrder[i] !== tempInitiativeOrder[i]) {\n            requireRefresh = true;\n            break;\n          }\n        }\n      }\n\n      if (requireRefresh) {\n        this.setState({\n          initiativeOrder: tempInitiativeOrder\n        });\n      } // Render list into TimelineCard React Components\n\n\n      let toRender = [];\n\n      for (let i = 0; i < this.state.iterations; i++) {\n        toRender.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Separator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 27\n        }, this));\n        toRender.push(this.state.initiativeOrder.map(i => {\n          return /*#__PURE__*/_jsxDEV(TimelineCard, {\n            member: i\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 24\n          }, this);\n        }));\n      }\n\n      return toRender;\n    };\n\n    this.state = {\n      iterations: 2,\n      currentRound: [],\n      initiativeOrder: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.TimelineViewContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineToolbar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.SmallBar,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.TimelineSummary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.IterationsContainer,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.IterationsField,\n            type: \"number\",\n            value: this.state.iterations,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineMain,\n        children: this.renderInitiativeOrder(this.props.memberList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineCurrent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      iterations: event.target.value\n    });\n  }\n\n}\n\nexport default TimelineView;","map":{"version":3,"names":["React","TimelineCard","styles","TimelineView","Component","constructor","props","handleInitiativeChange","newInitiative","memberIndex","onInitiativeChange","renderCurrentRound","list","state","currentRound","length","newRound","forEach","i","initiative","push","sort","a","b","setState","toRender","map","renderInitiativeOrder","tempInitiativeOrder","debugarray","alert","requireRefresh","initiativeOrder","iterations","Separator","handleChange","bind","render","TimelineViewContainer","TimelineToolbar","SmallBar","TimelineSummary","IterationsContainer","IterationsField","TimelineMain","memberList","TimelineCurrent","event","target","value"],"sources":["/home/kristin/Documents/dev/5eInitiative/initiative-tracker/src/TimelineView.js"],"sourcesContent":["import React from \"react\"\nimport TimelineCard from \"./TimelineCard\"\nimport styles from \"./CSS/TimelineView.module.css\"\n\nclass TimelineView extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            iterations: 2,\n            currentRound: [],\n            initiativeOrder: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n\n\n    render(){\n        return(\n            <div className={styles.TimelineViewContainer}>\n                <div className={styles.TimelineToolbar}>\n\n                </div>\n\n                <div className={styles.SmallBar}> \n                    <div className={styles.TimelineSummary}>\n\n                    </div>\n                    <div className={styles.IterationsContainer}>\n                        <input className={styles.IterationsField} type=\"number\" value={this.state.iterations} onChange={this.handleChange}/>\n                    </div>\n                </div>\n\n                <div className={styles.TimelineMain}>\n                    {this.renderInitiativeOrder(this.props.memberList)}\n                </div>\n                \n                <div className={styles.TimelineCurrent}>\n                    \n                </div>\n\n            </div>\n            \n        )\n    }\n\n\n    handleChange(event){\n        this.setState({iterations: event.target.value});\n    }\n\n\n\n    handleInitiativeChange = (newInitiative, memberIndex) => {\n        this.props.onInitiativeChange(newInitiative, memberIndex);\n    }\n\n\n\n    renderCurrentRound = list => {\n        // First, check if the current round is empty. If it is, generate a new round from the working member list\n        if (this.state.currentRound.length <= 0){\n            let newRound = [];\n            list.forEach(i => {\n                if (i.initiative != null) {newRound.push(i)}\n            })\n\n            // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n            newRound.sort((a, b) => (a.initiative*1 < b.initiative*1) ? 1 : -1);\n\n            this.setState({currentRound: newRound});\n        }\n\n        // Then, render everyone in the current round\n        let toRender = []\n\n        toRender.push(this.state.currentRound.map(i => {\n            return <TimelineCard member={i}/>\n        }))\n\n        return toRender;\n\n    }\n\n\n\n    renderInitiativeOrder = list => {\n        // Shift member list into initiative list, discarding anyone without an initiative\n        let tempInitiativeOrder = [];\n        let debugarray = [];\n        list.forEach(i => {\n            debugarray.push(i.initiative);\n            if (i.initiative != null) {tempInitiativeOrder.push(i);}\n        })\n        alert(debugarray);\n\n        // Sort initiative order\n        // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n        tempInitiativeOrder.sort((a, b) => (a.initiative*1 < b.initiative*1) ? 1 : -1); \n        \n        let requireRefresh = false;\n        if (this.state.initiativeOrder.length !== tempInitiativeOrder.length) {requireRefresh = true;}\n        else {\n            for (let i = 0; i < tempInitiativeOrder.length; i++){\n                if (this.state.initiativeOrder[i] !== tempInitiativeOrder[i]){\n                    requireRefresh = true;\n                    break;\n                }\n            }\n        }\n        if (requireRefresh){\n            this.setState({initiativeOrder : tempInitiativeOrder});\n        }\n\n        // Render list into TimelineCard React Components\n        let toRender = []\n\n        for (let i = 0; i < this.state.iterations; i++) {\n            toRender.push(<div className={styles.Separator}></div>)\n            toRender.push(this.state.initiativeOrder.map(i => {\n                return <TimelineCard member={i}/>\n            }))\n        }\n\n        return toRender;\n    }\n}\n\nexport default TimelineView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}