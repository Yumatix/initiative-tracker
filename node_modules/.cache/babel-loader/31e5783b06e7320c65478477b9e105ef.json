{"ast":null,"code":"var _jsxFileName = \"/home/kristin/Documents/dev/initiative-tracker/src/TimelineView.js\";\nimport React from \"react\";\nimport TimelineCard from \"./TimelineCard\";\nimport styles from \"./CSS/TimelineView.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TimelineView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInitiativeChange = (newInitiative, memberIndex) => {\n      this.props.onInitiativeChange(newInitiative, memberIndex);\n    };\n\n    this.onTurnStart = startingMember => {\n      console.log(startingMember.name + \" turn start!\");\n    };\n\n    this.onTurnEnd = endingMember => {\n      console.log(endingMember.name + \" turn end.\");\n    };\n\n    this.onRoundEnd = () => {\n      console.log(\"Round is now over!\");\n    };\n\n    this.renderInitiativeOrder = list => {\n      // Shift member list into initiative list, discarding anyone without an initiative\n      let tempInitiativeOrder = [];\n      list.forEach(i => {\n        if (i.initiative != null) {\n          tempInitiativeOrder.push(i);\n        }\n      }); // Sort initiative order\n      // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n\n      tempInitiativeOrder.sort((a, b) => a.initiative * 1 < b.initiative * 1 ? 1 : -1);\n      let requireRefresh = false;\n\n      if (this.state.initiativeOrder.length !== tempInitiativeOrder.length) {\n        requireRefresh = true;\n      } else {\n        for (let i = 0; i < tempInitiativeOrder.length; i++) {\n          if (this.state.initiativeOrder[i] !== tempInitiativeOrder[i]) {\n            requireRefresh = true;\n            break;\n          }\n        }\n      }\n\n      if (requireRefresh) {\n        this.setState({\n          initiativeOrder: tempInitiativeOrder\n        });\n      } // Render list into TimelineCard React Components\n\n\n      let toRender = [];\n\n      for (let i = 0; i < this.state.iterations; i++) {\n        toRender.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Separator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 27\n        }, this));\n        toRender.push(this.state.initiativeOrder.map(i => {\n          return /*#__PURE__*/_jsxDEV(TimelineCard, {\n            member: i,\n            onChange: this.handleInitiativeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 24\n          }, this);\n        }));\n      }\n\n      return toRender;\n    };\n\n    this.toggleAutoRound = () => {\n      // Toggled on\n      if (!this.state.autoRound) {\n        this.setState({\n          autoRound: true\n        });\n      } // Toggled off\n      else {\n        this.setState({\n          autoRound: false\n        });\n      }\n    };\n\n    this.toggleActive = () => {\n      // Toggled game on\n      if (!this.state.gameActive) {\n        // Try to generate a new round\n        let newRound = this.generateRound(); // If the new round is still empty (nobody has any initiative scores), turn the game back off\n\n        if (newRound.length > 0) {\n          this.setState({\n            currentRound: newRound,\n            gameActive: true\n          });\n        } else {\n          this.setState({\n            gameActive: false\n          });\n          alert(\"No initiatives have been entered!\");\n        }\n      } // Toggled game off\n      else {\n        this.setState({\n          currentRound: [],\n          gameActive: false\n        });\n      }\n    };\n\n    this.nextTurn = () => {\n      // Call onTurnEnd event\n      this.onTurnEnd(this.state.currentRound[0]); // Remove current turn member, shifting all the other members in the round down an index\n\n      let updatedRound = [];\n\n      for (let i = 1; i < this.state.currentRound.length; i++) {\n        updatedRound.push(this.state.currentRound[i]);\n      }\n\n      this.setState({\n        currentRound: updatedRound\n      }); // Call onTurnStart event\n\n      if (updatedRound.length > 0) {\n        this.onTurnStart(updatedRound[0]);\n      }\n    };\n\n    this.state = {\n      iterations: 1,\n      initiativeOrder: [],\n      currentRound: [],\n      gameActive: false,\n      autoRound: true\n    };\n    this.handleIterationsChange = this.handleIterationsChange.bind(this);\n  }\n\n  render() {\n    let autoRoundBtnClass = this.state.autoRound ? styles.AutoRoundActiveButton : styles.AutoRoundInactiveButton;\n    let activeBtnClass = this.state.gameActive ? styles.GameActiveButton : styles.GameInactiveButton;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.TimelineViewContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineToolbar,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.toggleAutoRound,\n          className: autoRoundBtnClass,\n          children: \"Auto Round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.toggleActive,\n          className: activeBtnClass,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.IterationsContainer,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.IterationsField,\n            type: \"number\",\n            value: this.state.iterations,\n            onChange: this.handleIterationsChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineMain,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.CurrentRoundContainer,\n          children: this.renderCurrentRound()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.InitiativeOrderContainer,\n          children: this.renderInitiativeOrder(this.props.memberList)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TimelineCurrent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.CurrentTurnContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.nextTurn,\n          className: styles.NextTurnButton,\n          children: \"Next Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n  handleIterationsChange(event) {\n    this.setState({\n      iterations: event.target.value\n    });\n  }\n\n  renderCurrentRound() {\n    let toRender = [];\n    let myTurnMarked = false;\n\n    if (this.state.currentRound.length <= 0 && this.state.gameActive === true) {\n      // Auto generate new round when current round ends        \n      if (this.state.autoRound) {\n        let newRound = this.generateRound();\n        this.setState({\n          currentRound: newRound\n        });\n        this.onRoundEnd();\n      } // Automatically set \"active\" to off when the round ends, if auto is turned off\n      else {\n        this.setState({\n          gameActive: false\n        });\n        this.onRoundEnd();\n      }\n    }\n\n    if (this.state.currentRound.length > 0) {\n      toRender.push(this.state.currentRound.map(i => {\n        if (!myTurnMarked) {\n          myTurnMarked = true;\n          return /*#__PURE__*/_jsxDEV(TimelineCard, {\n            member: i,\n            myTurn: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 28\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(TimelineCard, {\n            member: i,\n            myTurn: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 28\n          }, this);\n        }\n      }));\n    }\n\n    return toRender;\n  }\n\n  generateRound() {\n    let newRound = [];\n    this.state.initiativeOrder.forEach(i => {\n      newRound.push(i);\n    });\n    return newRound;\n  }\n\n}\n\nexport default TimelineView;","map":{"version":3,"names":["React","TimelineCard","styles","TimelineView","Component","constructor","props","handleInitiativeChange","newInitiative","memberIndex","onInitiativeChange","onTurnStart","startingMember","console","log","name","onTurnEnd","endingMember","onRoundEnd","renderInitiativeOrder","list","tempInitiativeOrder","forEach","i","initiative","push","sort","a","b","requireRefresh","state","initiativeOrder","length","setState","toRender","iterations","Separator","map","toggleAutoRound","autoRound","toggleActive","gameActive","newRound","generateRound","currentRound","alert","nextTurn","updatedRound","handleIterationsChange","bind","render","autoRoundBtnClass","AutoRoundActiveButton","AutoRoundInactiveButton","activeBtnClass","GameActiveButton","GameInactiveButton","TimelineViewContainer","TimelineToolbar","IterationsContainer","IterationsField","TimelineMain","CurrentRoundContainer","renderCurrentRound","InitiativeOrderContainer","memberList","TimelineCurrent","CurrentTurnContainer","NextTurnButton","event","target","value","myTurnMarked"],"sources":["/home/kristin/Documents/dev/initiative-tracker/src/TimelineView.js"],"sourcesContent":["import React from \"react\"\nimport TimelineCard from \"./TimelineCard\"\nimport styles from \"./CSS/TimelineView.module.css\"\n\nclass TimelineView extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            iterations: 1,\n            initiativeOrder: [],\n            currentRound: [],\n            gameActive: false,\n            autoRound: true\n        };\n        this.handleIterationsChange = this.handleIterationsChange.bind(this);\n    }\n\n\n\n    render(){\n        let autoRoundBtnClass = (this.state.autoRound) ? styles.AutoRoundActiveButton : styles.AutoRoundInactiveButton;\n        let activeBtnClass = (this.state.gameActive) ? styles.GameActiveButton : styles.GameInactiveButton;\n\n        return(\n            <div className={styles.TimelineViewContainer}>\n                <div className={styles.TimelineToolbar}>\n                    <button type=\"button\" onClick={this.toggleAutoRound} className={autoRoundBtnClass}>\n                        Auto Round\n                    </button>\n                    <button type=\"button\" onClick={this.toggleActive} className={activeBtnClass}>\n                        Start\n                    </button>\n                    <div className={styles.IterationsContainer}>\n                        <input className={styles.IterationsField} type=\"number\" value={this.state.iterations} onChange={this.handleIterationsChange}/>\n                    </div>\n                </div>\n\n                <div className={styles.TimelineMain}>\n                    <div className={styles.CurrentRoundContainer}>\n                        {this.renderCurrentRound()}\n                    </div>\n                    <div className={styles.InitiativeOrderContainer}>\n                        {this.renderInitiativeOrder(this.props.memberList)}\n                    </div>\n                </div>\n                \n                <div className={styles.TimelineCurrent}>\n                    <div className={styles.CurrentTurnContainer}>\n\n                    </div>\n                    <button type=\"button\" onClick={this.nextTurn} className={styles.NextTurnButton}>\n                        Next Turn\n                    </button>\n                </div>\n\n            </div>\n            \n        )\n    }\n\n\n    handleIterationsChange(event){\n        this.setState({iterations: event.target.value});\n    }\n\n\n\n    handleInitiativeChange = (newInitiative, memberIndex) => {\n        this.props.onInitiativeChange(newInitiative, memberIndex);\n    }\n\n    onTurnStart = (startingMember) => {\n        console.log(startingMember.name + \" turn start!\");\n    }\n\n    onTurnEnd = (endingMember) => {\n        console.log(endingMember.name + \" turn end.\");\n    }\n\n    onRoundEnd = () => {\n        console.log(\"Round is now over!\");\n    }\n\n\n    renderCurrentRound() {\n        let toRender = [];\n        let myTurnMarked = false;\n\n        if (this.state.currentRound.length <= 0 && this.state.gameActive === true){\n            \n            // Auto generate new round when current round ends        \n            if (this.state.autoRound){\n                let newRound = this.generateRound();\n                this.setState({currentRound : newRound});\n                this.onRoundEnd();\n            } \n            // Automatically set \"active\" to off when the round ends, if auto is turned off\n            else {\n                this.setState({gameActive: false});\n                this.onRoundEnd();\n            }\n        } \n\n\n        \n\n        if(this.state.currentRound.length > 0){\n            toRender.push(this.state.currentRound.map(i => {\n                if (!myTurnMarked) {\n                    myTurnMarked = true;\n                    return <TimelineCard member={i} myTurn={true}/>\n                } \n                else {\n                    return <TimelineCard member={i} myTurn={false}/>\n                }\n            }));\n        }\n\n        return toRender;\n    }\n\n\n    renderInitiativeOrder = list => {\n        // Shift member list into initiative list, discarding anyone without an initiative\n        let tempInitiativeOrder = [];\n        list.forEach(i => {\n            if (i.initiative != null) {tempInitiativeOrder.push(i);}\n        })\n\n        // Sort initiative order\n        // Note: multiply initiative by 1 to force JS to convert them to numbers during the comparison\n        tempInitiativeOrder.sort((a, b) => (a.initiative*1 < b.initiative*1) ? 1 : -1); \n        \n        let requireRefresh = false;\n        if (this.state.initiativeOrder.length !== tempInitiativeOrder.length) {requireRefresh = true;}\n        else {\n            for (let i = 0; i < tempInitiativeOrder.length; i++){\n                if (this.state.initiativeOrder[i] !== tempInitiativeOrder[i]){\n                    requireRefresh = true;\n                    break;\n                }\n            }\n        }\n        if (requireRefresh){\n            this.setState({initiativeOrder : tempInitiativeOrder});\n        }\n\n        // Render list into TimelineCard React Components\n        let toRender = []\n\n        for (let i = 0; i < this.state.iterations; i++) {\n            toRender.push(<div className={styles.Separator}></div>)\n            toRender.push(this.state.initiativeOrder.map(i => {\n                return <TimelineCard member={i} onChange={this.handleInitiativeChange}/>\n            }))\n        }\n\n        return toRender;\n    }\n\n    generateRound(){\n        let newRound = [];\n\n        this.state.initiativeOrder.forEach(i => {\n            newRound.push(i);\n        })\n\n        return newRound;\n    }\n\n    toggleAutoRound = () => {\n\n        // Toggled on\n        if (!this.state.autoRound){\n            this.setState({autoRound: true});\n        }\n\n        // Toggled off\n        else {\n            this.setState({autoRound: false});\n        }\n    }\n\n    toggleActive = () => {\n       \n        // Toggled game on\n        if (!this.state.gameActive){\n            // Try to generate a new round\n            let newRound = this.generateRound();\n\n            // If the new round is still empty (nobody has any initiative scores), turn the game back off\n            if (newRound.length > 0){\n                this.setState({currentRound: newRound, gameActive: true});\n            } else {\n                this.setState({gameActive: false});\n                alert(\"No initiatives have been entered!\");\n            }\n        }\n\n        // Toggled game off\n        else {\n            this.setState({currentRound: [], gameActive: false});\n        }\n    }\n\n    nextTurn = () => {\n\n        // Call onTurnEnd event\n        this.onTurnEnd(this.state.currentRound[0]);\n\n        // Remove current turn member, shifting all the other members in the round down an index\n        let updatedRound = [];\n        for (let i = 1; i < this.state.currentRound.length; i++){\n            updatedRound.push(this.state.currentRound[i]);\n        }\n        this.setState({currentRound : updatedRound});\n\n        // Call onTurnStart event\n        if (updatedRound.length > 0) {this.onTurnStart(updatedRound[0]);\n        }\n    }\n}\n\nexport default TimelineView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}